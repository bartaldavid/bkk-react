/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/{dialect}/api/where/alert-search": {
    get: operations["searchAlerts"];
  };
  "/{dialect}/api/where/arrivals-and-departures-for-location": {
    get: operations["getArrivalsAndDeparturesForLocation"];
  };
  "/{dialect}/api/where/arrivals-and-departures-for-stop": {
    get: operations["getArrivalsAndDeparturesForStop"];
  };
  "/{dialect}/api/where/bicycle-rental": {
    get: operations["getBicycleRentalStations"];
  };
  "/{dialect}/api/where/metadata": {
    get: operations["getMetadata"];
  };
  "/{dialect}/api/where/multi-route-details": {
    get: operations["getMultiRouteDetails"];
  };
  "/{dialect}/api/where/plan-trip": {
    get: operations["plan"];
  };
  "/{dialect}/api/where/plan-access": {
    get: operations["planAccess"];
  };
  "/{dialect}/api/where/references": {
    get: operations["getReferences"];
  };
  "/{dialect}/api/where/route-details-for-stop": {
    get: operations["getRouteDetailsForStop"];
  };
  "/{dialect}/api/where/route-details": {
    get: operations["getRouteDetails"];
  };
  "/{dialect}/api/where/schedule-for-stop": {
    get: operations["getScheduleForStop"];
  };
  "/{dialect}/api/where/search": {
    get: operations["search"];
  };
  "/{dialect}/api/where/statistics": {
    get: operations["getStatistics"];
  };
  "/{dialect}/api/where/stops-for-location": {
    get: operations["getStopsForLocation"];
  };
  "/{dialect}/api/where/ticketing-locations": {
    get: operations["getTicketingData"];
  };
  "/{dialect}/api/where/trip-details": {
    get: operations["getTripDetails"];
  };
  "/{dialect}/api/where/vehicle-for-trip": {
    get: operations["getVehicleForTrip"];
  };
  "/{dialect}/api/where/vehicles-for-location": {
    get: operations["getVehiclesForLocation"];
  };
  "/{dialect}/api/where/vehicles-for-route": {
    get: operations["getVehiclesForRoute"];
  };
  "/{dialect}/api/where/vehicles-for-stop": {
    get: operations["getVehiclesForStop"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @default 2
     * @enum {string}
     */
    ApiVersion: "2" | "3" | "4";
    /** @enum {string} */
    Dialect: "otp" | "mobile";
    /**
     * @default true
     * @enum {string}
     */
    ReferencesSchema:
      | "true"
      | "false"
      | "compact"
      | "agencies"
      | "routes"
      | "trips"
      | "stops"
      | "alerts"
      | "stations";
    AlertSearchMethodResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitEntryWithReferencesTransitSearch"];
    };
    MobileTransitReferences: {
      /** @description Szolgáltatók referenciáinak listája. */
      agencies?: components["schemas"]["TransitAgency"][];
      /** @description Járatok referenciáinak listája. */
      routes?: components["schemas"]["TransitRoute"][];
      /** @description Megállók referenciáinak listája. */
      stops?: components["schemas"]["TransitStop"][];
      /** @description Menetek referenciáinak listája. */
      trips?: components["schemas"]["TransitTrip"][];
      /** @description Zavarok referenciáinak listája. */
      alerts?: components["schemas"]["TransitAlert"][];
    };
    OTPTransitReferences: {
      /** @description Szolgáltatók referenciáinak listája. */
      agencies?: {
        [key: string]: components["schemas"]["TransitAgency"] | undefined;
      };
      /** @description Járatok referenciáinak listája. */
      routes?: {
        [key: string]: components["schemas"]["TransitRoute"] | undefined;
      };
      /** @description Megállók referenciáinak listája. */
      stops?: {
        [key: string]: components["schemas"]["TransitStop"] | undefined;
      };
      /** @description Menetek referenciáinak listája. */
      trips?: {
        [key: string]: components["schemas"]["TransitTrip"] | undefined;
      };
      /** @description Zavarok referenciáinak listája. */
      alerts?: {
        [key: string]: components["schemas"]["TransitAlert"] | undefined;
      };
    };
    /**
     * @description A válasz státusza.
     * @example OK
     * @enum {string}
     */
    Status:
      | "NOT_MODIFIED"
      | "OK"
      | "UNKNOWN_ERROR"
      | "NOT_FOUND"
      | "INVALID_VALUE"
      | "NOT_OPERATING"
      | "OUTSIDE_BOUNDS"
      | "PATH_NOT_FOUND"
      | "NO_TRANSIT_TIMES"
      | "REQUEST_TIMEOUT"
      | "BOGUS_PARAMETER"
      | "TOO_CLOSE"
      | "LOCATION_NOT_ACCESSIBLE"
      | "MISSING_MODE"
      | "ERROR_NO_GRAPH"
      | "PLANNER_SERVICE_UNAVAILABLE"
      | "ERROR_VEHICLE_LOCATION_SERVICE"
      | "ERROR_BIKE_RENTAL_SERVICE"
      | "ERROR_TICKETING_SERVICE"
      | "ERROR_TRANSIT_INDEX_SERVICE";
    /** @description Szolgáltatók referenciáinak listája. */
    TransitAgency: {
      /**
       * @description A szolgáltató azonosítója.
       * @example BKK
       */
      id?: string;
      /**
       * @description A szolgáltató neve.
       * @example BKK
       */
      name?: string;
      /**
       * @description A szolgáltató linkje.
       * @example https://www.bkk.hu
       */
      url?: string;
      /**
       * @description A szolgáltató időzónája.
       * @example Europe/Budapest
       */
      timezone?: string;
      /**
       * @description A szolgáltató nyelve.
       * @example hu
       */
      lang?: string;
      /**
       * @description A szolgáltató telefonszáma.
       * @example +36 1 2 345 678
       */
      phone?: string;
    };
    /** @description Zavarok referenciáinak listája. */
    TransitAlert: {
      /**
       * @description A zavar azonosítója.
       * @example BKK_bkkinfo-79155
       */
      id?: string;
      /**
       * Format: int64
       * @description A zavar kezdő időpontja másodpercben.
       * @example 1623362400
       */
      start?: number;
      /**
       * Format: int64
       * @description A zavar végének időpontja másodpercben.
       * @example 1626040799
       */
      end?: number;
      /**
       * Format: int64
       * @description A zavar időbélyege másodpercben.
       * @example 1625747229
       */
      timestamp?: number;
      /**
       * Format: int64
       * @description A zavar utolsó módosításának időpontja másodpercben.
       * @example 1623333927
       */
      modifiedTime?: number;
      /**
       * @deprecated
       * @description A zavar által érintett megállók azonosítóinak listája.
       * @example [
       *   "BKK_F01086",
       *   "BKK_F01086"
       * ]
       */
      stopIds?: string[];
      /**
       * @description A zavar által érintett járatok azonosítóinak listája.
       * @example [
       *   "BKK_5100",
       *   "BKK_5100"
       * ]
       */
      routeIds?: string[];
      url?: components["schemas"]["TranslatedString"];
      header?: components["schemas"]["TranslatedString"];
      description?: components["schemas"]["TranslatedString"];
      /** @description A zavar hatására használhatatlan lesz-e az alkalmazás. */
      disableApp?: boolean | null;
      startText?: components["schemas"]["TranslatedString"];
      endText?: components["schemas"]["TranslatedString"];
      /** @description A zavar által érintett járatok listája. */
      routes?: components["schemas"]["TransitAlertRoute"][];
    };
    /** @description A zavar által érintett járatok listája. */
    TransitAlertRoute: {
      /**
       * @description A zavar által érintett járat azonosítója.
       * @example BKK_5100
       */
      routeId?: string;
      /**
       * @description A zavar által érintett megállók azonosítóinak listája a járaton.
       * @example [
       *   "BKK_F01086",
       *   "BKK_F01086"
       * ]
       */
      stopIds?: string[];
    };
    /** @description A válasz adat. */
    TransitEntryWithReferencesTransitSearch: {
      /**
       * @description Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
       * @example false
       */
      limitExceeded?: boolean;
      entry?: components["schemas"]["TransitSearch"];
      references?: components["schemas"]["TransitReferences"];
      /**
       * @description Az adat típusa. Egy entitás esetén "entryWithReferences".
       * @example entryWithReferences
       */
      class?: string;
    };
    /** @description A válaszhoz tartozó referenciák. */
    TransitReferences:
      | components["schemas"]["OTPTransitReferences"]
      | components["schemas"]["MobileTransitReferences"];
    /** @description Járatok referenciáinak listája. */
    TransitRoute: {
      /**
       * @description A járat azonosítója.
       * @example BKK_3040
       */
      id?: string;
      /**
       * @description A járat rövid neve.
       * @example 4
       */
      shortName?: string;
      /** @description A járat hosszú neve. */
      longName?: string | null;
      /**
       * @description A járat neve. Ha egy | szerepel a névben, akkor a végállomásokat választja el amelyek külön sorokban megjeleníthetőek. COMPACT referenciák kérése esetében nincs kitöltve.
       * @example Újbuda-központ M | Széll Kálmán tér M
       */
      description?: string | null;
      /**
       * @description A járat típusa.
       * @example TRAM
       * @enum {string}
       */
      type?:
        | "WALK"
        | "BICYCLE"
        | "CAR"
        | "TRAM"
        | "SUBWAY"
        | "SUBURBAN_RAILWAY"
        | "RAIL"
        | "COACH"
        | "BUS"
        | "TROLLEYBUS"
        | "FERRY"
        | "CABLE_CAR"
        | "GONDOLA"
        | "FUNICULAR"
        | "TRANSIT"
        | "TRAINISH"
        | "BUSISH"
        | "LEG_SWITCH"
        | "CUSTOM_MOTOR_VEHICLE";
      /** @description A járat linkje. */
      url?: string | null;
      /**
       * @deprecated
       * @description A járat színe. Deprecated: használjuk a `style` attribútumot helyette.
       * @example FFD800
       */
      color?: string;
      /**
       * @deprecated
       * @description A járat szövegének színe. Deprecated: használjuk a `style` attribútumot helyette.
       * @example 000000
       */
      textColor?: string;
      /**
       * @description A járatot üzemeltető szolgáltató azonosítója.
       * @example BKK
       */
      agencyId?: string;
      /**
       * @deprecated
       * @description A járat ikonjának megjelenítési típusa. Deprecated: használjuk a `style` attribútumot helyette.
       * @example BOX
       */
      iconDisplayType?: string;
      /**
       * @deprecated
       * @description A járat ikonjának megjelenítési szövege. Deprecated: használjuk a `style` attribútumot helyette.
       * @example 4
       */
      iconDisplayText?: string;
      /**
       * @description Kerékpár szállítása engedélyezett-e a járaton.
       * @example false
       */
      bikesAllowed?: boolean;
      style?: components["schemas"]["TransitRouteStyle"];
      /**
       * Format: int32
       * @description A járat rendezési sorszáma a többi járathoz viszonyítva.
       * @example 10
       */
      sortOrder?: number;
    };
    /** @description A járat megjelenítési stílusa. */
    TransitRouteStyle: {
      /**
       * @description A járat színe.
       * @example 009FE3
       */
      color?: string;
      stop?: components["schemas"]["TransitStopStyle"];
      icon?: components["schemas"]["TransitRouteStyleIcon"];
      vehicleIcon?: components["schemas"]["TransitVehicleStyleIcon"];
    };
    /** @description A járathoz tartozó ikon stílusa. */
    TransitRouteStyleIcon: {
      /**
       * @description Az ikon típusa.
       * @example BOX
       * @enum {string}
       */
      type?: "BOX" | "CIRCLE";
      /**
       * @description Az ikon felirata.
       * @example 5
       */
      text?: string;
      /**
       * @description Az ikon feliratának színe.
       * @example FFFFFF
       */
      textColor?: string;
    } | null;
    /** @description A lekért adat. */
    TransitSearch: {
      /**
       * @description A keresett kifejezés.
       * @example BKK_bkkinfo-75694
       */
      query?: string;
      /**
       * @description Az illeszkedő megállók azonosítói.
       * @example [
       *   "BKK_CSF01024",
       *   "BKK_CSF01024"
       * ]
       */
      stopIds?: (string | null)[] | null;
      /**
       * @description Az illeszkedő járatok azonosítói.
       * @example [
       *   "BKK_3040",
       *   "BKK_3040"
       * ]
       */
      routeIds?: (string | null)[] | null;
      /**
       * @description Az illeszkedő zavarok azonosítói.
       * @example [
       *   "BKK_bkkinfo-75694",
       *   "BKK_bkkinfo-75694"
       * ]
       */
      alertIds?: (string | null)[] | null;
    };
    /** @description Megállók referenciáinak listája. */
    TransitStop: {
      /**
       * @description A megálló azonosítója.
       * @example BKK_110452
       */
      id?: string;
      /**
       * @description A megálló utazástervező azonosítója, amelyet a `fromPlace` és a `toPlace` megadásához lehet használni.
       * @example BKK:CSF01076
       */
      vertex?: string;
      /**
       * Format: double
       * @description A megálló szélességi koordinátája.
       * @example 47.427631
       */
      lat?: number;
      /**
       * Format: double
       * @description A megálló hosszúsági koordinátája.
       * @example 19.265759
       */
      lon?: number;
      /**
       * @description A megálló neve.
       * @example Nemzetközi Posta Kicserélő Központ
       */
      name?: string;
      /**
       * @description A megálló kódja.
       * @example 110452
       */
      code?: string;
      /**
       * @description A megálló iránya.
       * @example -47
       */
      direction?: string;
      /**
       * @description A megálló peron-kódja.
       * @example 0
       */
      platformCode?: string | null;
      /** @description A megálló leírása. */
      description?: string | null;
      /**
       * Format: int32
       * @description A megálló hely-típusa.
       * @example 0
       */
      locationType?: number;
      /**
       * @description A megálló hely-altípusa.
       * @example 0
       */
      locationSubType?: string | null;
      /**
       * @description A szülő-megálló azonosítója.
       * @example BKK_CS110452
       */
      parentStationId?: string | null;
      /**
       * @deprecated
       * @description A megálló típusa. Deprecated: használjuk a `style` attribútumot.
       * @example BUS
       * @enum {string|null}
       */
      type?:
        | "WALK"
        | "BICYCLE"
        | "CAR"
        | "TRAM"
        | "SUBWAY"
        | "SUBURBAN_RAILWAY"
        | "RAIL"
        | "COACH"
        | "BUS"
        | "TROLLEYBUS"
        | "FERRY"
        | "CABLE_CAR"
        | "GONDOLA"
        | "FUNICULAR"
        | "TRANSIT"
        | "TRAINISH"
        | "BUSISH"
        | "LEG_SWITCH"
        | "CUSTOM_MOTOR_VEHICLE"
        | null;
      /**
       * @description Akadálymentesített-e a megálló.
       * @example true
       */
      wheelchairBoarding?: boolean;
      /**
       * @description A megállót érintő járatok azonosítói.
       * @example [
       *   "BKK_2005"
       * ]
       */
      routeIds?: string[];
      /**
       * @deprecated
       * @description A megálló színezésének típusa. Deprecated: használjuk a `style` attribútumot.
       * @example BUS
       */
      stopColorType?: string | null;
      /**
       * @description A megállóra vonatkozó aktív zavarok azonosítói.
       * @example [
       *   "BKK_bkkinfo-75685"
       * ]
       */
      alertIds?: (string | null)[] | null;
      style?: components["schemas"]["TransitStopStyle"];
    };
    /** @description A megálló stílusa. */
    TransitStopStyle: {
      /**
       * @description A megálló stílushoz tartozó színek tömbje.
       * @example [
       *   "4CA22F"
       * ]
       */
      colors?: (string | null)[] | null;
      /**
       * @description A megálló stílus típusa.
       * @example PRIORITY
       * @enum {string|null}
       */
      type?: "PRIORITY" | null;
      /**
       * @description A megálló stílus képe.
       * @example route-icon-M4
       */
      image?: string | null;
    } | null;
    /** @description Menetek referenciáinak listája. */
    TransitTrip: {
      /**
       * @description A menet azonosítója.
       * @example BKK_C313504617
       */
      id?: string;
      /**
       * @description A menethez tartozó járat azonosítója.
       * @example BKK_3040
       */
      routeId?: string;
      /**
       * @description A menet útvonalvezetésének azonosítója.
       * @example BKK_C313504617
       */
      shapeId?: string;
      /**
       * @description A menethez tartozó GTFS block_id, amennyiben létezik.
       * @example C31350_3040_5_15
       */
      blockId?: string | null;
      /**
       * @description A menet célállomása.
       * @example Széll Kálmán tér M
       */
      tripHeadsign?: string;
      /**
       * @description A menet rövid neve.
       * @example 4
       */
      tripShortName?: string | null;
      /**
       * @description A menet közlekedési naptárának azonosítója.
       * @example BKK_C31350K2HCPER011
       */
      serviceId?: string;
      /**
       * @description A menet irányának azonosítója.
       * @example 1
       */
      directionId?: string;
      /**
       * @description Szállítható-e kerékpár a meneten.
       * @example false
       */
      bikesAllowed?: boolean;
      /**
       * @description Alacsonypadlós-e a menet.
       * @example true
       */
      wheelchairAccessible?: boolean;
    };
    /** @description A járathoz tartozó jármű ikon stílus. */
    TransitVehicleStyleIcon: {
      /**
       * @description Az ikon neve.
       * @example bus
       */
      name?: string | null;
    } | null;
    /** @description A zavar végének időpontjához tartozó szöveg. */
    TranslatedString: {
      /**
       * @description Lokalizáció és a hozzá tartozó fordítások összerendelése.
       * @example {
       *   "en": "English translation",
       *   "hu": "Magyar fordítás"
       * }
       */
      translations?: {
        [key: string]: string | undefined;
      };
      /**
       * @description A fordítás-összerendelések első eleme.
       * @example English translation
       */
      someTranslation?: string;
    } | null;
    ArrivalsAndDeparturesForLocationOTPMethodResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitListEntryWithReferencesTransitDepartureGroup"];
    };
    /** @description A lekért adatok listája. */
    TransitDepartureGroup: {
      /**
       * @description A csoporthoz tartozó járat azonosító.
       * @example BKK_3040
       */
      routeId?: string;
      /**
       * @description A csoporthoz tartozó célállomás.
       * @example Újbuda-központ M
       */
      headsign?: string;
      /** @description A csoport menetrendi bejegyzései. */
      stopTimes?: components["schemas"]["TransitScheduleStopTime"][];
    };
    /** @description A válasz adat. */
    TransitListEntryWithReferencesTransitDepartureGroup: {
      /** @description A lekért adatok listája. */
      list?: components["schemas"]["TransitDepartureGroup"][];
      /** @description Az értéke mindig `false`. */
      outOfRange?: boolean;
      /**
       * @description Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
       * @example false
       */
      limitExceeded?: boolean;
      references?: components["schemas"]["TransitReferences"];
      /**
       * @description Az adat típusa. Lista esetén "listWithReferences".
       * @example listWithReferences
       */
      class?: string;
    };
    /** @description Az irányhoz tartozó menetrendi bejegyzések. */
    TransitScheduleStopTime: {
      /**
       * @description A megálló azonosítója
       * @example BKK_050185
       */
      stopId?: string;
      /**
       * @description A megállóban kijelzett célállomás.
       * @example Havanna utcai lakótelep
       */
      stopHeadsign?: string;
      /**
       * Format: int64
       * @description A megállóba érkezés tervezett ideje epoch másodbercben. Az első megállónál hiányzik.
       * @example 1625732820
       */
      arrivalTime?: number | null;
      /**
       * Format: int64
       * @description A megállóból való indulás tervezett ideje epoch másodbercben. Az utolsó megállónál hiányzik.
       * @example 1625732820
       */
      departureTime?: number | null;
      /**
       * Format: int64
       * @description A megállóba érkezés becsült ideje epoch másodbercben, ha a járathoz van valós idejű adat. Az első megállónál hiányzik.
       * @example 1625732820
       */
      predictedArrivalTime?: number | null;
      /**
       * Format: int64
       * @description A megállóból való becsült indulás ideje epoch másodbercben, ha a járathoz van valós idejű adat. Az utolsó megállónál hiányzik.
       * @example 1625732820
       */
      predictedDepartureTime?: number | null;
      /**
       * @description Igaz, ha a menethez tartozó valós idejű adatok bizonytalanok.
       * @example true
       */
      uncertain?: boolean | null;
      /**
       * @description A bejegyzést tartalmazó menet azonosítója.
       * @example BKK_C32269235
       */
      tripId?: string;
      /**
       * @description A bejegyzéshez tartozó menet menetrendi napja.
       * @example 20210708
       */
      serviceDate?: string;
      /**
       * @description A bejegyzéshez tartozó menet alacsonypadlóssága.
       * @example true
       */
      wheelchairAccessible?: boolean;
      /**
       * @deprecated
       * @description A megálló csoportjának azonosítója.
       * @example [
       *   "Havanna utcai lakótelep"
       * ]
       */
      groupIds?: string[];
      /**
       * @description A megállóhoz tartozó aktív zavarok azonosítóinak listája.
       * @example [
       *   "BKK_bkkinfo-75685"
       * ]
       */
      alertIds?: string[];
    };
    ArrivalsAndDeparturesForStopOTPMethodResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitEntryWithReferencesTransitArrivalsAndDepartures"];
    };
    /** @description A lekért adat. */
    TransitArrivalsAndDepartures: {
      /**
       * @description A menetrendi bejegyzésekhez tartozó megálló azonosítója.
       * @example BKK_F01029
       */
      stopId?: string;
      /**
       * @description A megállóhoz tartozó járatok azonosítói.
       * @example [
       *   "BKK_VP06",
       *   "BKK_0090"
       * ]
       */
      routeIds?: string[];
      /**
       * @description A megállóhoz tartozó aktív zavarok.
       * @example [
       *   "BKK_bkkinfo-75685"
       * ]
       */
      alertIds?: string[];
      /**
       * @description A közeli megállók azonosítói.
       * @example [
       *   "BKK_F01029",
       *   "BKK_F01029"
       * ]
       */
      nearbyStopIds?: string[];
      /** @description A megállóhoz tartozó menetrendi bejegyzések. */
      stopTimes?: components["schemas"]["TransitScheduleStopTime"][];
    };
    /** @description A válasz adat. */
    TransitEntryWithReferencesTransitArrivalsAndDepartures: {
      /**
       * @description Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
       * @example false
       */
      limitExceeded?: boolean;
      entry?: components["schemas"]["TransitArrivalsAndDepartures"];
      references?: components["schemas"]["TransitReferences"];
      /**
       * @description Az adat típusa. Egy entitás esetén "entryWithReferences".
       * @example entryWithReferences
       */
      class?: string;
    };
    BicycleRentalMethodResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitListEntryWithReferencesTransitBikeRentalStation"];
    };
    /** @description A lekért adatok listája. */
    TransitBikeRentalStation: {
      /**
       * @description Az állomás azonosítója.
       * @example 42711896
       */
      id?: string;
      /**
       * Format: double
       * @description Az állomás szélességi koordinátája.
       * @example 47.51032
       */
      lat?: number;
      /**
       * Format: double
       * @description Az állomás hosszúsági koordinátája.
       * @example 19.028615
       */
      lon?: number;
      /**
       * @description Az állomás neve.
       * @example Millenáris
       */
      name?: string;
      /**
       * @description Az állomás kódja.
       * @example 0213
       */
      code?: string;
      /**
       * @description Az állomás típusa.
       * @example stele
       */
      type?: string;
      /**
       * Format: int32
       * @description Az állomáson elérhető kerékpárok száma.
       * @example 5
       */
      bikes?: number;
      /**
       * Format: int32
       * @description Az állomás összes helyének száma. Ez mindig fix 999.
       * @example 999
       */
      spaces?: number;
    };
    /** @description A válasz adat. */
    TransitListEntryWithReferencesTransitBikeRentalStation: {
      /** @description A lekért adatok listája. */
      list?: components["schemas"]["TransitBikeRentalStation"][];
      /** @description Az értéke mindig `false`. */
      outOfRange?: boolean;
      /**
       * @description Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
       * @example false
       */
      limitExceeded?: boolean;
      references?: components["schemas"]["TransitReferences"];
      /**
       * @description Az adat típusa. Lista esetén "listWithReferences".
       * @example listWithReferences
       */
      class?: string;
    };
    MetadataResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitEntryWithReferencesTransitMetadata"];
    };
    /** @description A válasz adat. */
    TransitEntryWithReferencesTransitMetadata: {
      /**
       * @description Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
       * @example false
       */
      limitExceeded?: boolean;
      entry?: components["schemas"]["TransitMetadata"];
      references?: components["schemas"]["TransitReferences"];
      /**
       * @description Az adat típusa. Egy entitás esetén "entryWithReferences".
       * @example entryWithReferences
       */
      class?: string;
    };
    /** @description A lekért adat. */
    TransitMetadata: {
      /**
       * Format: int64
       * @description Aktuális szerveridő ezredmásodpercben.
       * @example 1625666633946
       */
      time?: number;
      /**
       * @description A szerver tranzit adatainak időzónája.
       * @example Europe/Budapest
       */
      timeZone?: string;
      /**
       * @description A szerver ideje ISO8601 formátumban.
       * @example "2021-07-07T14:03:53.000Z"
       */
      readableTime?: string;
      /**
       * @description A szerveren található adatok érvényességének kezdete.
       * @example 20210703
       */
      validityStart?: string;
      /**
       * @description A szerveren található adatok érvényességének vége.
       * @example 20210801
       */
      validityEnd?: string;
      /**
       * @description Azon időszak kezdete, amelyre az összes szolgáltató biztosít adatot. Több szolgáltató esetén későbbi lehet, mint a `validityStart`.
       * @example 20210704
       */
      completeValidityStart?: string;
      /**
       * @description Azon időszak vége, amelyre az összes szolgáltató biztosít adatot. Több szolgáltató esetén korábbi lehet, mint a `validityEnd`.
       * @example 20210731
       */
      completeValidityEnd?: string;
      /**
       * Format: double
       * @description A betöltött adatok területének befoglaló téglalapjának két sarokpontja.
       * @example 47.14781490388629
       */
      lowerLeftLatitude?: number;
      /**
       * Format: double
       * @description A betöltött adatok területének befoglaló téglalapjának két sarokpontja.
       * @example 47.14781490388629
       */
      lowerLeftLongitude?: number;
      /**
       * Format: double
       * @description A betöltött adatok területének befoglaló téglalapjának két sarokpontja.
       * @example 47.14781490388629
       */
      upperRightLatitude?: number;
      /**
       * Format: double
       * @description A betöltött adatok területének befoglaló téglalapjának két sarokpontja.
       * @example 47.14781490388629
       */
      upperRightLongitude?: number;
      /**
       * @description A betöltött adatokat határoló sokszög vonala (polyline).
       * @example o{sxFl}vaMjDpCf@\
       */
      boundingPolyLine?: string;
      /**
       * @description Az egész alkalmazásra vonatkozó aktív zavarok azonosítói.
       * @example [
       *   "BKK_bkkinfo-75685"
       * ]
       */
      alertIds?: string[];
      /**
       * @description Az aktív adatforrások azonosítói.
       * @example [
       *   "https://www.bkk.hu:L2847-20210704"
       * ]
       */
      feedIds?: string[];
      /**
       * @description A menetrendi napok, és a hozzá tartozó napok típusát tartalmazó összerendelés egy hétre (az aktuális nap, és a következő 6).
       * @example {
       *   "20210707": "WED"
       * }
       */
      dayTypes?: {
        [key: string]: string | undefined;
      };
    };
    MultiRouteDetailsMethodResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitListEntryWithReferencesTransitRouteDetails"];
    };
    /** @description A válasz adat. */
    TransitListEntryWithReferencesTransitRouteDetails: {
      /** @description A lekért adatok listája. */
      list?: components["schemas"]["TransitRouteDetails"][];
      /** @description Az értéke mindig `false`. */
      outOfRange?: boolean;
      /**
       * @description Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
       * @example false
       */
      limitExceeded?: boolean;
      references?: components["schemas"]["TransitReferences"];
      /**
       * @description Az adat típusa. Lista esetén "listWithReferences".
       * @example listWithReferences
       */
      class?: string;
    };
    /** @description A menethez tartozó kódolt minta (polyline). */
    TransitPolyline: {
      /** @description A minta magassági adatai (mindig üres). */
      levels?: string;
      /**
       * @description A minta kódolt pontjai.
       * @example o{sxFl}vaMjDpCf@\
       */
      points?: string;
      /**
       * Format: int32
       * @description A minta pontjainak száma.
       * @example 3
       */
      length?: number;
    };
    /** @description A lekért adat. */
    TransitRouteDetails: {
      /**
       * @description A járat azonosítója.
       * @example BKK_3040
       */
      id?: string;
      /**
       * @description A járat rövid neve.
       * @example 4
       */
      shortName?: string;
      /** @description A járat hosszú neve. */
      longName?: string | null;
      /**
       * @description A járat neve. Ha egy | szerepel a névben, akkor a végállomásokat választja el amelyek külön sorokban megjeleníthetőek. COMPACT referenciák kérése lines. Not filled out when using COMPACT references.
       * @example Újbuda-központ M | Széll Kálmán tér M esetében nincs kitöltve.
       */
      description?: string | null;
      /**
       * @description A járat típusa.
       * @example TRAM
       * @enum {string}
       */
      type?:
        | "WALK"
        | "BICYCLE"
        | "CAR"
        | "TRAM"
        | "SUBWAY"
        | "SUBURBAN_RAILWAY"
        | "RAIL"
        | "COACH"
        | "BUS"
        | "TROLLEYBUS"
        | "FERRY"
        | "CABLE_CAR"
        | "GONDOLA"
        | "FUNICULAR"
        | "TRANSIT"
        | "TRAINISH"
        | "BUSISH"
        | "LEG_SWITCH"
        | "CUSTOM_MOTOR_VEHICLE";
      /** @description A járat linkje. */
      url?: string | null;
      /**
       * @deprecated
       * @description A járat színe. Deprecated: használjuk a `style` attribútumot helyette.
       * @example FFD800
       */
      color?: string;
      /**
       * @deprecated
       * @description A járat szövegének színe. Deprecated: használjuk a `style` attribútumot helyette.
       * @example 000000
       */
      textColor?: string;
      /**
       * @description A járatot üzemeltető szolgáltató azonosítója.
       * @example BKK
       */
      agencyId?: string;
      /**
       * @deprecated
       * @description A járat ikonjának megjelenítési típusa. Deprecated: használjuk a `style` attribútumot helyette.
       * @example BOX
       */
      iconDisplayType?: string;
      /**
       * @deprecated
       * @description A járat ikonjának megjelenítési szövege. Deprecated: használjuk a `style` attribútumot helyette.
       * @example 4
       */
      iconDisplayText?: string;
      /**
       * @description Kerékpár szállítása engedélyezett-e a járaton.
       * @example false
       */
      bikesAllowed?: boolean;
      style?: components["schemas"]["TransitRouteStyle"];
      /**
       * Format: int32
       * @description A járat rendezési sorszáma a többi járathoz viszonyítva.
       * @example 10
       */
      sortOrder?: number;
      /** @description A járathoz tartozó járat variánsok listája. */
      variants?: components["schemas"]["TransitRouteVariant"][];
      /**
       * @description A járaton található aktív zavarok azonosítóinak listája.
       * @example [
       *   "BKK_bkkinfo-75685"
       * ]
       */
      alertIds?: string[];
    };
    /** @description A járathoz tartozó járat variánsok listája. */
    TransitRouteVariant: {
      /**
       * @description A járat variáns neve.
       * @example 4-es (439)
       */
      name?: string;
      /**
       * @description A járat variáns megállóinak azonosítói.
       * @example [
       *   "BKK_F02477",
       *   "BKK_F00308"
       * ]
       */
      stopIds?: string[];
      /**
       * @description A járat variáns iránya.
       * @example 0
       */
      direction?: string;
      /**
       * @description A járat variáns célállomása.
       * @example Újbuda-központ M
       */
      headsign?: string;
      polyline?: components["schemas"]["TransitPolyline"];
      /**
       * @description A járat variánshoz tartozó járat azonosítója. Akkor van kitöltve, ha különbözik az eredetitől.
       * @example BKK_3040
       */
      routeId?: string;
      /**
       * @description A járat variáns típusa.
       * @example BKK_3040
       */
      type?: string;
    };
    /** @enum {string} */
    TraverseMode:
      | "WALK"
      | "BICYCLE"
      | "CAR"
      | "SUBURBAN_RAILWAY"
      | "COACH"
      | "TRAM"
      | "SUBWAY"
      | "RAIL"
      | "BUS"
      | "TROLLEYBUS"
      | "FERRY"
      | "CABLE_CAR"
      | "GONDOLA"
      | "FUNICULAR"
      | "TRANSIT"
      | "AIRPLANE";
    /**
     * @default MID
     * @enum {string}
     */
    WalkProfile: "SLOW" | "MID" | "FAST";
    /** @description A tervezés metaadatai. Tartalmazza a következő és az előző tervezési időablakot a lapozás megvalósításához ezred másodpercben. */
    ApiTripSearchMetadata: {
      /** Format: int32 */
      searchWindowUsed?: number;
      /** Format: int64 */
      nextDateTime?: number;
      /** Format: int64 */
      prevDateTime?: number;
    };
    /** @description Az útiterv kivonatos megjelenítéséhez használható  lábak és adatok. */
    DisplayedLeg: {
      /**
       * @description Jelzi, ha a láb az első az útitervben.
       * @example true
       */
      first?: boolean;
      /**
       * @description Jelzi, ha a láb az utolsó az útitervben.
       * @example true
       */
      last?: boolean;
      /**
       * Format: int64
       * @description Az utolsó lábon az érkezési idő, az összes többin az indulási.
       * @example 1625825460000
       */
      time?: number;
      /**
       * @description Jelzi, hogy a láb nem tranzit típusú.
       * @example true
       */
      walkTo?: boolean;
      /**
       * @description Az indulási hely neve, kivéve az utolsón, ahol a érkezési helyé.
       * @example realCity ITS Kft.
       */
      name?: string;
    };
    /** @description A láb geometriája. */
    EncodedPolylineBean: {
      /**
       * @description A geometria (polyline) pontjai kódolva.
       * @example o{sxFl}vaMjDpCf@\
       */
      points?: string;
      /**
       * Format: int32
       * @description A geometria (polyline) pontjainak száma.
       * @example 3
       */
      length?: number;
    };
    /** @description A talált útvonalak listája. */
    Itinerary: {
      /**
       * Format: int64
       * @description Az útvonal hossza másodpercben.
       * @example 1732
       */
      duration?: number;
      /**
       * Format: date-time
       * @description Az indulási időpont ezredmásodpercben.
       */
      startTime?: string;
      /**
       * Format: date-time
       * @description Az érkezési időpont ezredmásodpercben.
       */
      endTime?: string;
      /**
       * Format: int64
       * @description Sétálási idő az útvonalon másodpercben.
       * @example 620
       */
      walkTime?: number;
      /**
       * Format: int64
       * @description Kerékpározási idő az útvonalon másodpercben.
       * @example 620
       */
      bikeTime?: number;
      /**
       * Format: int64
       * @description Járművön töltött idő az útvonalon másodpercben.
       * @example 620
       */
      transitTime?: number;
      /**
       * Format: int64
       * @description Várakozási idő járműre az útvonalon másodpercben.
       * @example 620
       */
      waitingTime?: number;
      /**
       * Format: double
       * @description Kerékpározási távolság az útvonalon méterben.
       * @example 826.7
       */
      bikeDistance?: number;
      /**
       * Format: double
       * @description Sétálási távolság az útvonalon méterben.
       * @example 826.7
       */
      walkDistance?: number;
      /**
       * @description Jelzi, hogy a sétálási limit túl lett lépve az útitervben.
       * @example false
       */
      walkLimitExceeded?: boolean;
      /** @description Jelzi, hogy a visszaadott útvonalak tartalmazhatnak olyan járatokat (pl.: vonatok), amire a terv során érintett jegyértékesítési helyen example: false nem lehet jegyet váltani. */
      notAllTicketsAvailable?: boolean;
      /**
       * Format: double
       * @description Az útiterv során hány métert süllyed az útvonal.
       * @example 0
       */
      elevationLost?: number;
      /**
       * Format: double
       * @description Az útiterv során hány métert emelkedik az útvonal.
       * @example 0
       */
      elevationGained?: number;
      /**
       * Format: int32
       * @description Átszállások száma az útitervben.
       * @example 1
       */
      transfers?: number;
      /**
       * Format: int32
       * @description Az utazástervező algoritmus által használt súly.
       * @example 998
       */
      generalizedCost?: number;
      /**
       * Format: int32
       * @description A várakozási idővel igazított súly.
       * @example 998
       */
      waitTimeAdjustedGeneralizedCost?: number;
      /** @description Az útiterv lábai (részei). */
      legs?: components["schemas"]["Leg"][];
      /** @description Az útiterv kivonatos megjelenítéséhez használható  lábak és adatok. */
      displayedLegs?: components["schemas"]["DisplayedLeg"][];
      /**
       * @description Jelzi, ha az útvonal meredekebb, mint a paraméterekben kért.
       * @example false
       */
      tooSloped?: boolean;
      /** @description Útitervminták engedélyezése esetén a mintába tartozó útitervek. */
      patternItineraries?: components["schemas"]["Itinerary"][];
      patternFrequency?: components["schemas"]["PatternStatistics"];
      patternDuration?: components["schemas"]["PatternStatistics"];
      /**
       * @description Jelzi, ha az útvonalhoz kell termékajánlást mutatni.
       * @example true
       */
      displayProductRecommendation?: boolean;
    };
    /** @description Az útiterv lábai (részei). */
    Leg: {
      /**
       * Format: date-time
       * @description A láb kezdete ezredmásodpercben.
       */
      startTime?: string;
      /**
       * Format: date-time
       * @description A láb vége ezredmásodpercben.
       */
      endTime?: string;
      /**
       * Format: int32
       * @description Tranzit láb esetén a láb indulása és a tényleges felszállás közötti késleltetés.
       * @example 0
       */
      departureDelay?: number;
      /**
       * Format: int32
       * @description Tranzit láb esetén a láb vége és a tényleges leszállás közötti késleltetés.
       * @example 0
       */
      arrivalDelay?: number;
      /**
       * @description Jelzi, hogy a láb adatai valós idejű forrásból származnak.
       * @example true
       */
      realTime?: boolean;
      /**
       * Format: double
       * @description A láb bejárása alatt megtett táv méterben.
       * @example 209.215
       */
      distance?: number;
      /**
       * @description Jelzi, hogy a láb egy pathway (pl. metró lejáró).
       * @example false
       */
      pathway?: boolean;
      /**
       * @description A lábon használt közlekedési mód.
       * @example WALK
       */
      mode?: string;
      /**
       * @description Tranzit láb esetén a járatot biztosító szolgáltató neve.
       * @example BKK
       */
      agencyName?: string | null;
      /**
       * @description Tranzit láb esetén a járatot biztosító szolgáltató linkje.
       * @example https://www.bkk.hu
       */
      agencyUrl?: string | null;
      /**
       * Format: int32
       * @description Tranzit láb esetén a járatot biztosító szolgáltató időzónájának eltolódása.
       * @example 0
       */
      agencyTimeZoneOffset?: number | null;
      /**
       * @description Tranzit láb esetén a járat hátterének színe a megjelenítéséhez.
       * @example 009FE3
       */
      routeColor?: string | null;
      /**
       * @description Tranzit láb esetén a járat azonosítója.
       * @example BKK_MP53
       */
      routeId?: string | null;
      /**
       * @description Tranzit láb esetén a járat szövegének színe a megjelenítéséhez.
       * @example FFFFFF
       */
      routeTextColor?: string | null;
      /**
       * @description Jelzi, hogy az utas maradjon a járművön a végállomásnál, mert másik menetként folytatódik (hurokjárat).
       * @example false
       */
      interlineWithPreviousLeg?: boolean | null;
      /**
       * @description Tranzit láb esetén a menethez tartozó GTFS block_id, amennyiben létezik.
       * @example C32859_MP53_39_13
       */
      tripBlockId?: string | null;
      /**
       * @description Tranzit láb esetén a menet célállomása.
       * @example Nagyvárad tér M
       */
      headsign?: string | null;
      /**
       * @description Tranzit láb esetén a járatot biztosító szolgáltató azonosítója.
       * @example BKK_BKK
       */
      agencyId?: string | null;
      /**
       * @description Tranzit láb esetén a menet azonosítója.
       * @example BKK_C328598112
       */
      tripId?: string | null;
      /**
       * @description Tranzit láb esetén a menet menetrendi napja.
       * @example 20210709
       */
      serviceDate?: string | null;
      from?: components["schemas"]["Place"];
      to?: components["schemas"]["Place"];
      legGeometry?: components["schemas"]["EncodedPolylineBean"];
      /**
       * @description A lábhoz tartozó aktív zavarok azonosítói.
       * @example [
       *   "BKK_bkkinfo-75685"
       * ]
       */
      alertIds?: string[];
      /**
       * @description Tranzit láb esetén a járat rövid neve.
       * @example M3
       */
      routeShortName?: string | null;
      /**
       * @description Tranzit láb esetén a járat hosszú neve.
       * @example M3
       */
      routeLongName?: string | null;
      /**
       * @description Igényvezérelt menet esetén a felszállási szabály.
       * @example mustPhone
       */
      boardRule?: string | null;
      /**
       * @description Igényvezérelt menet esetén a leszállási szabály.
       * @example coordinateWithDriver
       */
      alightRule?: string | null;
      /**
       * @description Jelzi, hogy a lábat bérelt kerékpárral kell bejárni.
       * @example true
       */
      rentedBike?: boolean | null;
      /**
       * @description Jelzi, hogy a lábon sétálni kell kerékpáros tervezés esetén.
       * @example true
       */
      walkingBike?: boolean | null;
      /**
       * @description A várakozási idő mennyiségi típusa a tranzit típusú lábon.
       * @example SHORT
       * @enum {string|null}
       */
      wait?: "SHORT" | "LONG" | null;
      /**
       * @description Útiterv minták esetén, a lábnak a mintában megfelelő, más lábakon használt járatok azonosítóinak listája.
       * @example [
       *   "BKK_MP53"
       * ]
       */
      routeIds?: (string | null)[] | null;
      /**
       * @description Útiterv minták esetén, a lábnak a mintában megfelelő, más lábakon használt menetek azonosítóinak listája.
       * @example [
       *   "BKK_C328598112",
       *   "BKK_C328598112"
       * ]
       */
      tripIds?: (string | null)[] | null;
      /**
       * @description Útiterv minták esetén jelzi, hogy a mintában a megfelelő lábak valamelyikén szerepel aktív riasztás. Nincs kitöltve, ha az útiterv minták ki vannak
       * @example true kapcsolva.
       */
      hasAlertInPattern?: boolean | null;
      /**
       * Format: int32
       * @description Az utazástervező algoritmus által használt súly.
       * @example 998
       */
      generalizedCost?: number;
      /** Format: int64 */
      duration?: number;
      timeZone?: {
        displayName?: string;
        id?: string;
        /** Format: int32 */
        dstsavings?: number;
        /** Format: int32 */
        rawOffset?: number;
      };
      transitLeg?: boolean;
      /** @description Tranzit láb esetén a köztes megállók a láb kezdete és végződése között. */
      intermediateStops?: components["schemas"]["Place"][] | null;
      /** @description Az útvonal lépései gyalogos, kerékpáros vagy autós láb lesetén. */
      steps?: components["schemas"]["WalkStep"][] | null;
    };
    /**
     * @description A lépéshez tartozó magassági adatok. Mindig üres, mert a rendszer még nem kezeli.
     * @example []
     */
    P2Double: {
      /** Format: double */
      first?: number;
      /** Format: double */
      second?: number;
    };
    /** @description Útitervminták engedélyezése esetén a minták időtartam-adatai. */
    PatternStatistics: {
      /**
       * Format: int64
       * @description Minimum érték. Akkor van kitöltve, ha az adatok különbözőek.
       */
      min?: number;
      /**
       * Format: int64
       * @description Maximum érték. Akkor van kitöltve, ha az adatok különbözőek.
       */
      max?: number;
      /**
       * Format: int64
       * @description Átlag érték. Akkor van kitöltve, ha az adatok megegyeznek.
       */
      avg?: number;
      /** @description A klienseken megjelenített szöveg. */
      text?: string;
    };
    /** @description Tranzit láb esetén a köztes megállók a láb kezdete és végződése között. */
    Place: {
      /**
       * @description Megálló esetén a megálló neve, POI-nál a POI neve.
       * @example realCity ITS Kft.
       */
      name?: string;
      ticketingLocation?: components["schemas"]["TicketingLocation"];
      /**
       * @description A megálló azonosítója, ha a hely egy megálló.
       * @example BKK_110452
       */
      stopId?: string | null;
      /**
       * @description A megálló kódja, ha a hely egy megálló.
       * @example 110452
       */
      stopCode?: string | null;
      /**
       * @description A megálló peron-kódja, ha a hely egy megálló.
       * @example 1
       */
      platformCode?: string | null;
      /**
       * Format: double
       * @description A hely hosszúsági koordinátája.
       * @example 19.071962345420864
       */
      lon?: number | null;
      /**
       * Format: double
       * @description A hely szélességi koordinátája.
       * @example 47.47430103584126
       */
      lat?: number | null;
      /**
       * Format: date-time
       * @description A helyre érkezés időpontja ezredmásodpercben.
       */
      arrival?: string | null;
      /**
       * Format: date-time
       * @description A helyről való indulás időpontja ezredmásodpercben.
       */
      departure?: string | null;
      /**
       * @description Az indulási és az érkezési hely címkéje. Az első és az utolsó útvonal lábon van kitöltve.
       * @example realCity ITS Kft.
       */
      orig?: string | null;
      /**
       * Format: int32
       * @description A megálló indexe, ha a hely egy megálló.
       * @example 10
       */
      stopIndex?: number | null;
      /**
       * Format: int32
       * @description A megálló sorszáma a meneten, ha a hely egy megálló.
       * @example 10
       */
      stopSequence?: number | null;
    } | null;
    PlanTripResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitEntryWithReferencesResponse"];
    };
    /** @description A hibát tartalmazza, ha nem sikerült a tervezés. */
    PlannerError: {
      /**
       * Format: int32
       * @description A hibaüzenet azonosítója.
       * @example 0
       */
      id?: number;
      /**
       * @description A hibaüzenet kódja.
       * @example OUTSIDE_BOUNDS
       * @enum {string}
       */
      message?:
        | "PLAN_OK"
        | "SYSTEM_ERROR"
        | "GRAPH_UNAVAILABLE"
        | "PLANNER_SERVICE_UNAVAILABLE"
        | "OUTSIDE_BOUNDS"
        | "PATH_NOT_FOUND"
        | "NO_TRANSIT_TIMES"
        | "REQUEST_TIMEOUT"
        | "BOGUS_PARAMETER"
        | "GEOCODE_FROM_NOT_FOUND"
        | "GEOCODE_TO_NOT_FOUND"
        | "GEOCODE_FROM_TO_NOT_FOUND"
        | "TOO_CLOSE"
        | "LOCATION_NOT_ACCESSIBLE"
        | "MISSING_MODE"
        | "GEOCODE_FROM_AMBIGUOUS"
        | "GEOCODE_TO_AMBIGUOUS"
        | "GEOCODE_FROM_TO_AMBIGUOUS"
        | "UNDERSPECIFIED_TRIANGLE"
        | "TRIANGLE_NOT_AFFINE"
        | "TRIANGLE_OPTIMIZE_TYPE_NOT_SET"
        | "TRIANGLE_VALUES_NOT_SET";
      /**
       * @description A rossz paraméterek listája.
       * @example [
       *   "from"
       * ]
       */
      missing?: string[];
      /**
       * @description Igaz, ha nem sikerült útvonalat találni.
       * @example true
       */
      noPath?: boolean;
      /** @enum {string} */
      msgFromMessage?:
        | "PLAN_OK"
        | "SYSTEM_ERROR"
        | "GRAPH_UNAVAILABLE"
        | "PLANNER_SERVICE_UNAVAILABLE"
        | "OUTSIDE_BOUNDS"
        | "PATH_NOT_FOUND"
        | "NO_TRANSIT_TIMES"
        | "REQUEST_TIMEOUT"
        | "BOGUS_PARAMETER"
        | "GEOCODE_FROM_NOT_FOUND"
        | "GEOCODE_TO_NOT_FOUND"
        | "GEOCODE_FROM_TO_NOT_FOUND"
        | "TOO_CLOSE"
        | "LOCATION_NOT_ACCESSIBLE"
        | "MISSING_MODE"
        | "GEOCODE_FROM_AMBIGUOUS"
        | "GEOCODE_TO_AMBIGUOUS"
        | "GEOCODE_FROM_TO_AMBIGUOUS"
        | "UNDERSPECIFIED_TRIANGLE"
        | "TRIANGLE_NOT_AFFINE"
        | "TRIANGLE_OPTIMIZE_TYPE_NOT_SET"
        | "TRIANGLE_VALUES_NOT_SET";
    } | null;
    /** @description A lekért adat. */
    Response: {
      /** @description A tervezési paraméterek. */
      requestParameters?: {
        [key: string]: string | undefined;
      };
      plan?: components["schemas"]["TripPlan"];
      metadata?: components["schemas"]["ApiTripSearchMetadata"];
      error?: components["schemas"]["PlannerError"];
    };
    /** @description A jegyértékesítési pontok listája. */
    TicketingLocation: {
      /**
       * @description A jegyértékesítési hely azonosítója.
       * @example 2306
       */
      id?: string;
      /**
       * @description A jegyértékesítési hely típusa.
       * @example RESELLER
       * @enum {string}
       */
      type?: "CUSTOMER_CENTER" | "CASHIER" | "VENDING_MACHINE" | "RESELLER";
      /**
       * @description A jegyértékesítési hely állapota.
       * @example OPERATIONAL
       * @enum {string}
       */
      state?: "PLANNED" | "OPERATIONAL" | "INOPERATIVE";
      /**
       * @description Ha `false`, akkor hibás az adat, így a felületen elrejtésre kerül.
       * @example true
       */
      visible?: boolean;
      /**
       * @description A jegyértékesítési hely helye.
       * @example Budapest, XIII. kerület
       */
      place?: string;
      /**
       * @description A jegyértékesítési hely címe.
       * @example Viktor Hugo utcai alulj. Lehel tér
       */
      address?: string;
      /**
       * @description A jegyértékesítési hely leírása.
       * @example Nemzeti Dohánybolt
       */
      description?: string;
      /**
       * @description A jegyértékesítési hely üzemeltetője.
       * @example Kisviszonteladó
       */
      operator?: string;
      /**
       * Format: double
       * @description A jegyértékesítési hely szélességi koordinátája.
       * @example 47.517458
       */
      lat?: number;
      /**
       * Format: double
       * @description A jegyértékesítési hely hosszúsági koordinátája.
       * @example 19.060594
       */
      lon?: number;
      /**
       * @description Jelzi, hogy a jegyértékesítési helyen elfogadnak készpénzt.
       * @example true
       */
      cashAccepted?: boolean;
      /**
       * @description Jelzi, hogy a jegyértékesítési helyen elfogadnak bankkártyát.
       * @example true
       */
      creditCardsAccepted?: boolean;
      /**
       * @description Lehet-e a helyszínen igazolványt csináltatni.
       * @example true
       */
      passIdCreation?: boolean;
      /**
       * @description Be lehet-e váltani a helyszínen jegyet.
       * @example true
       */
      ticketPassExchange?: boolean;
      /** @description A jegyértékesítési hely nyitvatartása. */
      openingPeriods?: components["schemas"]["TicketingPeriod"][];
      /** @description Az árusított termékek azonosítói. */
      products?: string[];
      /**
       * Format: date-time
       * @description A jegyértékesítési hely utolsó frissítésének időpontja ezredmásodpercben.
       */
      lastModified?: string;
    };
    /** @description A jegyértékesítési hely nyitvatartása. */
    TicketingPeriod: {
      /**
       * @description A nyitvatartási idő napja. Lehet HOL (ünnepnap) és 0247 (éjjel-nappali).
       * @example TUE
       * @enum {string}
       */
      dayOfWeek?:
        | "MON"
        | "TUE"
        | "WED"
        | "THU"
        | "FRI"
        | "SAT"
        | "SUN"
        | "HOL"
        | "O247";
      /**
       * @description Nyitási idő HH:mm formátumban.
       * @example 00:00
       */
      opens?: string;
      /**
       * @description Zárási idő HH:mm formátumban.
       * @example 23:59
       */
      closes?: string;
      /**
       * Format: int32
       * @description Nyitási idő másodpercben.
       * @example 0
       */
      opensSeconds?: number;
      /**
       * Format: int32
       * @description Zárási idő másodpercben.
       * @example 86340
       */
      closesSeconds?: number;
    };
    /** @description A válasz adat. */
    TransitEntryWithReferencesResponse: {
      /**
       * @description Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
       * @example false
       */
      limitExceeded?: boolean;
      entry?: components["schemas"]["Response"];
      references?: components["schemas"]["TransitReferences"];
      /**
       * @description Az adat típusa. Egy entitás esetén "entryWithReferences".
       * @example entryWithReferences
       */
      class?: string;
    };
    /** @description A tervezett útvonalak. */
    TripPlan: {
      /**
       * Format: date-time
       * @description Az útvonal kezdete ezredmásodpercben.
       */
      date?: string;
      from?: components["schemas"]["Place"];
      to?: components["schemas"]["Place"];
      /** @description A talált útvonalak listája. */
      itineraries?: components["schemas"]["Itinerary"][];
    };
    /** @description Az útvonal lépései gyalogos, kerékpáros vagy autós láb lesetén. */
    WalkStep: {
      /**
       * Format: double
       * @description A lépés hossza méterben.
       * @example 10.871
       */
      distance?: number;
      /**
       * @description A lépés iránya.
       * @example LEFT
       * @enum {string}
       */
      relativeDirection?:
        | "DEPART"
        | "HARD_LEFT"
        | "LEFT"
        | "SLIGHTLY_LEFT"
        | "CONTINUE"
        | "SLIGHTLY_RIGHT"
        | "RIGHT"
        | "HARD_RIGHT"
        | "CIRCLE_CLOCKWISE"
        | "CIRCLE_COUNTERCLOCKWISE"
        | "ELEVATOR"
        | "UTURN_LEFT"
        | "UTURN_RIGHT";
      /**
       * @description Az utca neve, amin a lépés halad.
       * @example Lehel tér M
       */
      streetName?: string;
      /**
       * @description A lépés abszolút iránya.
       * @example WEST
       * @enum {string}
       */
      absoluteDirection?:
        | "NORTH"
        | "NORTHEAST"
        | "EAST"
        | "SOUTHEAST"
        | "SOUTH"
        | "SOUTHWEST"
        | "WEST"
        | "NORTHWEST";
      /**
       * @description Jelzi, hogy az utca irányt vált egy kereszteződésben.
       * @example true
       */
      stayOn?: boolean;
      /**
       * @description Jelzi, hogy a lépés egy nyílt terület, pl.: pláza, vagy vonat peron.
       * @example true
       */
      area?: boolean;
      /**
       * @description Jelzi, hogy az utca nevét a rendszer generálta.
       * @example false
       */
      bogusName?: boolean;
      /**
       * Format: double
       * @description A lépés kezdetének hosszúsági koordinátája.
       * @example 19.060103047839256
       */
      lon?: number;
      /**
       * Format: double
       * @description A lépés kezdetének szélességi koordinátája.
       * @example 47.51758398883122
       */
      lat?: number;
      /**
       * @description A lépéshez tartozó magassági adatok. Mindig üres, mert a rendszer még nem kezeli.
       * @example []
       */
      elevation?: components["schemas"]["P2Double"][];
    } | null;
    ReferencesMethodResponse: {
      /**
       * @description Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
       * @example false
       */
      limitExceeded?: boolean;
      /** @description A lekért adat. */
      entry?: Record<string, never>;
      references?: components["schemas"]["TransitReferences"];
      /**
       * @description Az adat típusa. Egy entitás esetén "entryWithReferences"
       * @example entryWithReferences
       */
      class?: string;
    };
    RouteDetailsForStopMethodResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitListEntryWithReferencesTransitRoute"];
    };
    /** @description A válasz adat. */
    TransitListEntryWithReferencesTransitRoute: {
      /** @description A lekért adatok listája. */
      list?: components["schemas"]["TransitRoute"][];
      /** @description Az értéke mindig `false`. */
      outOfRange?: boolean;
      /**
       * @description Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
       * @example false
       */
      limitExceeded?: boolean;
      references?: components["schemas"]["TransitReferences"];
      /**
       * @description Az adat típusa. Lista esetén "listWithReferences".
       * @example listWithReferences
       */
      class?: string;
    };
    RouteDetailsMethodResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitEntryWithReferencesTransitRouteDetails"];
    };
    /** @description A válasz adat. */
    TransitEntryWithReferencesTransitRouteDetails: {
      /**
       * @description Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
       * @example false
       */
      limitExceeded?: boolean;
      entry?: components["schemas"]["TransitRouteDetails"];
      references?: components["schemas"]["TransitReferences"];
      /**
       * @description Az adat típusa. Egy entitás esetén "entryWithReferences".
       * @example entryWithReferences
       */
      class?: string;
    };
    ScheduleForStopOTPMethodResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitEntryWithReferencesTransitSchedule"];
    };
    /** @description A válasz adat. */
    TransitEntryWithReferencesTransitSchedule: {
      /**
       * @description Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
       * @example false
       */
      limitExceeded?: boolean;
      entry?: components["schemas"]["TransitSchedule"];
      references?: components["schemas"]["TransitReferences"];
      /**
       * @description Az adat típusa. Egy entitás esetén "entryWithReferences".
       * @example entryWithReferences
       */
      class?: string;
    };
    /** @description A megállóhoz tartozó menetrend. */
    TransitRouteSchedule: {
      /**
       * @description A menetrendhez tarozó járat azonosítója.
       * @example BKK_3060
       */
      routeId?: string;
      /**
       * @description A járathoz tartozó aktív zavarok.
       * @example [
       *   "BKK_bkkinfo-75685"
       * ]
       */
      alertIds?: string[];
      /** @description A menetrendi adatok irány szerint csoportosítva. */
      directions?: components["schemas"]["TransitRouteScheduleForDirection"][];
    };
    /** @description A menetrendi adatok irány szerint csoportosítva. */
    TransitRouteScheduleForDirection: {
      /**
       * @description Az irány azonosítója.
       * @example 0
       */
      directionId?: string;
      /** @description Célmegálló és a hozzá tartozó menetrendi adatok összerendelése. */
      groups?: {
        [key: string]:
          | components["schemas"]["TransitScheduleGroup"]
          | undefined;
      };
      /** @description Az irányhoz tartozó menetrendi bejegyzések. */
      stopTimes?: components["schemas"]["TransitScheduleStopTime"][];
    };
    /** @description A lekért adat. */
    TransitSchedule: {
      /**
       * @description A menetrend megállójának azonosítója.
       * @example BKK_F01294
       */
      stopId?: string;
      /**
       * @deprecated
       * @description A menetrendhez tartozó dátum.
       * @example 20210708
       */
      serviceDate?: string;
      /**
       * Format: date
       * @description A menetrendhez tartozó dátum.
       */
      date?: string;
      /**
       * @description A menetrendhez tartozó járatok azonosítói.
       * @example [
       *   "BKK_3040",
       *   "BKK_3060"
       * ]
       */
      routeIds?: string[];
      /**
       * @description A közeli megállók azonosítói.
       * @example [
       *   "BKK_F01294",
       *   "BKK_F01294"
       * ]
       */
      nearbyStopIds?: string[];
      /**
       * @description A megállóhoz tartozó aktív zavarok azonosítói.
       * @example [
       *   "BKK_bkkinfo-75685"
       * ]
       */
      alertIds?: string[];
      /** @description A megállóhoz tartozó menetrend. */
      schedules?: components["schemas"]["TransitRouteSchedule"][];
    };
    /** @description Célmegálló és a hozzá tartozó menetrendi adatok összerendelése. */
    TransitScheduleGroup: {
      /**
       * @description A menetrendi csoport azonosítója.
       * @example Mexikói út
       */
      groupId?: string;
      /**
       * @description A menetrendi csoport célállomása.
       * @example Mexikói út
       */
      headsign?: string;
      /**
       * @description A menetrendi csoport leírása.
       * @example M1-es Mexikói út felé
       */
      description?: string;
    };
    SearchMethodResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitEntryWithReferencesTransitSearch"];
    };
    StatisticsResponse: {
      /**
       * @description Egyszerű válasz.
       * @example OK
       */
      result?: string;
    };
    StopsForLocationResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitListEntryWithReferencesTransitStop"];
    };
    /** @description A válasz adat. */
    TransitListEntryWithReferencesTransitStop: {
      /** @description A lekért adatok listája. */
      list?: components["schemas"]["TransitStop"][];
      /** @description Az értéke mindig `false`. */
      outOfRange?: boolean;
      /**
       * @description Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
       * @example false
       */
      limitExceeded?: boolean;
      references?: components["schemas"]["TransitReferences"];
      /**
       * @description Az adat típusa. Lista esetén "listWithReferences".
       * @example listWithReferences
       */
      class?: string;
    };
    TicketingMethodResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitEntryWithReferencesTransitTicketing"];
    };
    /** @description A termékek listája. */
    TicketingProduct: {
      /**
       * @description A termék azonosítója.
       * @example 69
       */
      id?: string;
      /**
       * @description A termék csoportjának azonosítója.
       * @example 3
       */
      groupId?: string;
      /**
       * @description A termék csoportjának neve.
       * @example Havi bérletek
       */
      groupName?: string;
      /**
       * @description A termék neve.
       * @example Hév bérlet 20 km
       */
      name?: string;
      /**
       * @description A termék linkje.
       * @example https://bkk.hu/jegyek-es-berletek/arak/havi-berletek/hev-berlet-20-km.79/
       */
      url?: string;
      /**
       * @description A termék ára.
       * @example 14200 Ft
       */
      price?: string;
      /**
       * @description Ha `false`, akkor hibás az adat, így a felületen elrejtésre kerül.
       * @example true
       */
      visible?: boolean;
      /**
       * Format: date-time
       * @description A termék utolsó frissítésének időpontja ezred másodpercben.
       */
      lastModified?: string;
    };
    /** @description A válasz adat. */
    TransitEntryWithReferencesTransitTicketing: {
      /**
       * @description Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
       * @example false
       */
      limitExceeded?: boolean;
      entry?: components["schemas"]["TransitTicketing"];
      references?: components["schemas"]["TransitReferences"];
      /**
       * @description Az adat típusa. Egy entitás esetén "entryWithReferences".
       * @example entryWithReferences
       */
      class?: string;
    };
    /** @description A lekért adat. */
    TransitTicketing: {
      /**
       * Format: int64
       * @description A jegyértékesítési adatok legutóbbi módosulásának időpontja.
       * @example 1625710328000
       */
      lastModifiedTime?: number;
      /**
       * Format: int64
       * @description A legrégebb óta módosított értékesítési hely vagy termék módosításának időpontja.
       * @example 1562932460000
       */
      oldestModifiedTime?: number;
      /** @description A jegyértékesítési pontok listája. */
      locations?: components["schemas"]["TicketingLocation"][];
      /** @description A termékek listája. */
      products?: components["schemas"]["TicketingProduct"][];
    };
    /** @description A jármű pozíciója. */
    TransitCoordinatePoint: {
      /**
       * Format: float
       * @description Szélességi koordináta.
       * @example 47.47375
       */
      lat?: number;
      /**
       * Format: float
       * @description Hosszúsági koordináta.
       * @example 19.049086
       */
      lon?: number;
    };
    /** @description A válasz adat. */
    TransitEntryWithReferencesTransitTripDetailsOTP: {
      /**
       * @description Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
       * @example false
       */
      limitExceeded?: boolean;
      entry?: components["schemas"]["TransitTripDetailsOTP"];
      references?: components["schemas"]["TransitReferences"];
      /**
       * @description Az adat típusa. Egy entitás esetén "entryWithReferences".
       * @example entryWithReferences
       */
      class?: string;
    };
    /** @description Menetrendi bejegyzések a meneten. */
    TransitStopTime: {
      /**
       * @description A megálló azonosítója
       * @example BKK_050185
       */
      stopId?: string;
      /**
       * @description A megállóban kijelzett célállomás.
       * @example Havanna utcai lakótelep
       */
      stopHeadsign?: string;
      /**
       * Format: int64
       * @description A megállóba érkezés tervezett ideje epoch másodbercben. Az első megállónál hiányzik.
       * @example 1625732820
       */
      arrivalTime?: number | null;
      /**
       * Format: int64
       * @description A megállóból való indulás tervezett ideje epoch másodbercben. Az utolsó megállónál hiányzik.
       * @example 1625732820
       */
      departureTime?: number | null;
      /**
       * Format: int64
       * @description A megállóba érkezés becsült ideje epoch másodbercben, ha a járathoz van valós idejű adat. Az első megállónál hiányzik.
       * @example 1625732820
       */
      predictedArrivalTime?: number | null;
      /**
       * Format: int64
       * @description A megállóból való becsült indulás ideje epoch másodbercben, ha a járathoz van valós idejű adat. Az utolsó megállónál hiányzik.
       * @example 1625732820
       */
      predictedDepartureTime?: number | null;
      /**
       * @description Igaz, ha a menethez tartozó valós idejű adatok bizonytalanok.
       * @example true
       */
      uncertain?: boolean | null;
    };
    /** @description A lekért adat. */
    TransitTripDetailsOTP: {
      /**
       * @description A menet azonosítója.
       * @example BKK_C32344815
       */
      tripId?: string;
      /**
       * @description A menet menetrendi napja.
       * @example 20210708
       */
      serviceDate?: string;
      vehicle?: components["schemas"]["TransitVehicle"];
      polyline?: components["schemas"]["TransitPolyline"];
      /**
       * @description Aktív zavarok a meneten.
       * @example [
       *   "BKK_bkkinfo-75685"
       * ]
       */
      alertIds?: string[];
      /** @description Menetrendi bejegyzések a meneten. */
      stopTimes?: components["schemas"]["TransitStopTime"][];
      /**
       * @description A következő menet azonosítója a csoportban, ha a menet hurokjárat.
       * @example BKK_C3204650
       */
      nextBlockTripId?: string | null;
    };
    /** @description A lekért adatok listája. */
    TransitVehicle: {
      /**
       * @description A jármű azonosítója.
       * @example BKK_2035
       */
      vehicleId?: string;
      /**
       * @description A járműhöz tartozó megálló azonosítója.
       * @example BKK_F01992
       */
      stopId?: string;
      /**
       * Format: int32
       * @description A jármű által érintett aktuális megálló sorszáma a meneten.
       * @example 1
       */
      stopSequence?: number | null;
      /**
       * @description A menethez tartozó járat azonosítója, amit a jármű teljesít.
       * @example BKK_3040
       */
      routeId?: string;
      /**
       * Format: float
       * @description A jármű irányszöge.
       * @example 97
       */
      bearing?: number;
      location?: components["schemas"]["TransitCoordinatePoint"];
      /**
       * @description A jármű által teljesített menet menetrendi napja.
       * @example 20210707
       */
      serviceDate?: string;
      /**
       * @description A jármű rendszáma.
       * @example V2035
       */
      licensePlate?: string;
      /**
       * @description A jármű kijelzőjén megjelenő célállomáskép.
       * @example Széll Kálmán tér M
       */
      label?: string | null;
      /**
       * @description A jármű típusa.
       * @example Siemens Combino
       */
      model?: string | null;
      /**
       * @description Igaz, ha a jármű letért az útvonaláról.
       * @example false
       */
      deviated?: boolean;
      /**
       * @description Igaz, ha a jármű pozíciója kiöregedett.
       * @example false
       */
      stale?: boolean | null;
      /**
       * Format: int64
       * @description A járműhöz tartozó utolsó valós idejű adat időbélyege másodpercben.
       * @example 1625683727
       */
      lastUpdateTime?: number;
      /**
       * @description A jármű állapota.
       * @example IN_TRANSIT_TO
       * @enum {string}
       */
      status?: "INCOMING_AT" | "STOPPED_AT" | "IN_TRANSIT_TO";
      /**
       * @description A járműhöz tartozó torlódási állapot.
       * @example CONGESTION
       * @enum {string|null}
       */
      congestionLevel?: "UNKNOWN" | "CONGESTION" | null;
      /**
       * @deprecated
       * @description A jármű fajtája. Deprecated: használjuk a `style` attribútumot.
       * @example TRAM
       * @enum {string}
       */
      vehicleRouteType?:
        | "WALK"
        | "BICYCLE"
        | "CAR"
        | "TRAM"
        | "SUBWAY"
        | "SUBURBAN_RAILWAY"
        | "RAIL"
        | "COACH"
        | "BUS"
        | "TROLLEYBUS"
        | "FERRY"
        | "CABLE_CAR"
        | "GONDOLA"
        | "FUNICULAR"
        | "TRANSIT"
        | "TRAINISH"
        | "BUSISH"
        | "LEG_SWITCH"
        | "CUSTOM_MOTOR_VEHICLE";
      /**
       * Format: int32
       * @description Hol tart a jármű a két megálló közti szakaszon, százalékban.
       * @example 28
       */
      stopDistancePercent?: number;
      /**
       * @description Igaz, ha a jármű alacsonypadlós.
       * @example true
       */
      wheelchairAccessible?: boolean;
      occupancy?: components["schemas"]["TransitVehicleOccupancy"];
      capacity?: components["schemas"]["TransitVehicleOccupancy"];
      /**
       * @description A járműhöz tartozó menet azonosítója.
       * @example BKK_C3135012112
       */
      tripId?: string | null;
      style?: components["schemas"]["TransitVehicleStyle"];
    };
    /** @description A jármű kapacitása. */
    TransitVehicleOccupancy: {
      /**
       * Format: int32
       * @description Hány felnőtt van a járművön.
       * @example 350
       */
      adults?: number | null;
      /**
       * Format: int32
       * @description Hány gyermek van a járművön.
       * @example 350
       */
      children?: number | null;
      /**
       * Format: int32
       * @description Hány babakocsi van a járművön
       * @example 350
       */
      strollers?: number | null;
      /**
       * Format: int32
       * @description Hány kerekesszék van a járművön.
       * @example 350
       */
      wheelchairs?: number | null;
      /**
       * Format: int32
       * @description Hány be nem kategorizált entitás van a járművön.
       * @example 350
       */
      other?: number | null;
    } | null;
    /** @description A járműhöz tartozó stílus. */
    TransitVehicleStyle: {
      icon?: components["schemas"]["TransitVehicleStyleIcon"];
    } | null;
    TripDetailsOTPMethodResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitEntryWithReferencesTransitTripDetailsOTP"];
    };
    /** @description A válasz adat. */
    TransitListEntryWithReferencesTransitVehicle: {
      /** @description A lekért adatok listája. */
      list?: components["schemas"]["TransitVehicle"][];
      /** @description Az értéke mindig `false`. */
      outOfRange?: boolean;
      /**
       * @description Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
       * @example false
       */
      limitExceeded?: boolean;
      references?: components["schemas"]["TransitReferences"];
      /**
       * @description Az adat típusa. Lista esetén "listWithReferences".
       * @example listWithReferences
       */
      class?: string;
    };
    VehicleForTripMethodResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitListEntryWithReferencesTransitVehicle"];
    };
    VehiclesForLocationMethodResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitListEntryWithReferencesTransitVehicle"];
    };
    VehiclesForRouteMethodResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitListEntryWithReferencesTransitVehicle"];
    };
    VehiclesForStopMethodResponse: {
      /**
       * Format: int64
       * @description Az aktuális szerveridő ezredmásodpercben.
       * @example 1625747515786
       */
      currentTime?: number;
      /**
       * Format: int32
       * @description A válasz API verziója.
       * @example 3
       */
      version?: number;
      status?: components["schemas"]["Status"];
      /**
       * Format: int32
       * @description A válasz státusz kódja.
       * @example 200
       */
      code?: number;
      /**
       * @description A válasz szövege.
       * @example OK
       */
      text?: string;
      data?: components["schemas"]["TransitListEntryWithReferencesTransitVehicle"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  searchAlerts: {
    parameters: {
      /**
       * @description A keresési feltétel, amit a zavar fejlécével, leírásával, vagy azonosítójával illesztünk.
       * @example BKK_bkkinfo-75694
       */
      /**
       * @description A keresés időintervallumának eleje epoch másodpercben.
       * @example 1625695260
       */
      /**
       * @description A keresési időintervallum vége epoch másodpercben.
       * @example 1625695260
       */
      /**
       * @description A visszaadott elemek minimális száma.
       * @example 5
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query?: {
        query?: string;
        start?: number;
        end?: number;
        minResult?: number;
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description Visszatér a `query` paraméterben megadott keresési feltételnek megfelelő zavarokkal, amik aktívak a megadott időintervallumnban. */
      200: {
        content: {
          "application/json": components["schemas"]["AlertSearchMethodResponse"];
        };
      };
    };
  };
  getArrivalsAndDeparturesForLocation: {
    parameters: {
      /**
       * @description Menetrendi adatok maximális száma egy csoportban.
       * @example 2
       */
      /**
       * @description A kliens hosszúsági koordinátája.
       * @example 19.049086
       */
      /**
       * @description A kliens szélességi koordinátája.
       * @example 47.47375
       */
      /**
       * @description A lekérdezési időablak a `time` paraméter előtt ennyi perccel indul.
       * @example 2
       */
      /**
       * @description A lekérdezési időablak a `time` paraméter után ennyi perccel ér véget.
       * @example 30
       */
      /**
       * @description A megállók azonosítóinak listája, amelyekhez a lekérést végezzük.
       * @example BKK_F01029,BKK_F01029
       */
      /**
       * @description A válasz szűrésére használt járatok azonosítóinak listája.
       * @example BKK_VP06,BKK_0090
       */
      /**
       * @description A lekérdezés kiértékeléséhez használt időpont. Alapértelmezetten az aktuális szerveridő.
       * @example 1625740980
       */
      /**
       * @description Ha igaz akkor csak az érkezési (és előrejelzett érkezési) idők nem szerepelnek a válaszban.
       * @example false
       */
      /**
       * @description A visszaadott indulási és érkezési idők listájának maximális hossza.
       * @example 60
       */
      /**
       * @description A helyszín középpontjának szélessgéi koordinátája.
       * @example 47.4973131430789
       */
      /**
       * @description A helyszín középpontjának hosszúsági koordinátája.
       * @example 19.064639534671457
       */
      /**
       * @description A lekérési terület szélességi íve. (Terület szélessége: `lat +/- latspan`).
       * @example 0.013365429598373169
       */
      /**
       * @description A lekérési terület hosszúsági íve. (Terület hosszúsága: `lon +/- lonSpan`).
       * @example 0.032126676908724505
       */
      /**
       * @description Ha a `latSpan` vagy a `longSpan` nincs kitöltve, a keresési terület a középpontól számított `radius` méter távolság mind a négy irányban.
       * @example 100
       */
      /** @description A válasz szűrésére használt keresési kifejezés. */
      /**
       * @description A visszaadott elemek minimális száma.
       * @example 5
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query?: {
        groupLimit?: number;
        clientLon?: number;
        clientLat?: number;
        minutesBefore?: number;
        minutesAfter?: number;
        stopId?: string[];
        includeRouteId?: string[];
        time?: number;
        onlyDepartures?: boolean;
        limit?: number;
        lat?: number;
        lon?: number;
        latSpan?: number;
        lonSpan?: number;
        radius?: number;
        query?: string;
        minResult?: number;
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description Visszaadja egy területhez tartozó érkezési és indulási időket járatazonosítók és célállomások szerint csoportosítva. */
      200: {
        content: {
          "application/json": components["schemas"]["ArrivalsAndDeparturesForLocationOTPMethodResponse"];
        };
      };
    };
  };
  getArrivalsAndDeparturesForStop: {
    parameters: {
      /**
       * @description A lekérdezési időablak a `time` paraméter előtt ennyi perccel indul.
       * @example 2
       */
      /**
       * @description A lekérdezési időablak a `time` paraméter után ennyi perccel ér véget.
       * @example 30
       */
      /**
       * @description A megállók azonosítóinak listája, amelyekhez a lekérést végezzük.
       * @example BKK_F01029,BKK_F01029
       */
      /**
       * @description A válasz szűrésére használt járatok azonosítóinak listája.
       * @example BKK_VP06,BKK_0090
       */
      /**
       * @description A lekérdezés kiértékeléséhez használt időpont. Alapértelmezetten az aktuális szerveridő.
       * @example 1625740980
       */
      /**
       * @description Ha igaz akkor csak az érkezési (és előrejelzett érkezési) idők nem szerepelnek a válaszban.
       * @example false
       */
      /**
       * @description A visszaadott indulási és érkezési idők listájának maximális hossza.
       * @example 60
       */
      /**
       * @description A helyszín középpontjának szélessgéi koordinátája.
       * @example 47.4973131430789
       */
      /**
       * @description A helyszín középpontjának hosszúsági koordinátája.
       * @example 19.064639534671457
       */
      /**
       * @description A lekérési terület szélességi íve. (Terület szélessége: `lat +/- latspan`).
       * @example 0.013365429598373169
       */
      /**
       * @description A lekérési terület hosszúsági íve. (Terület hosszúsága: `lon +/- lonSpan`).
       * @example 0.032126676908724505
       */
      /**
       * @description Ha a `latSpan` vagy a `longSpan` nincs kitöltve, a keresési terület a középpontól számított `radius` méter távolság mind a négy irányban.
       * @example 100
       */
      /** @description A válasz szűrésére használt keresési kifejezés. */
      /**
       * @description A visszaadott elemek minimális száma.
       * @example 5
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query?: {
        minutesBefore?: number;
        minutesAfter?: number;
        stopId?: string[];
        includeRouteId?: string[];
        time?: number;
        onlyDepartures?: boolean;
        limit?: number;
        lat?: number;
        lon?: number;
        latSpan?: number;
        lonSpan?: number;
        radius?: number;
        query?: string;
        minResult?: number;
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description Lekéri a megállóhoz tartozó érkezési és indulási időket. */
      200: {
        content: {
          "application/json": components["schemas"]["ArrivalsAndDeparturesForStopOTPMethodResponse"];
        };
      };
    };
  };
  getBicycleRentalStations: {
    parameters: {
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query?: {
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description Visszatér az összes kerékpárkölcsönző állomással. */
      200: {
        content: {
          "application/json": components["schemas"]["BicycleRentalMethodResponse"];
        };
      };
    };
  };
  getMetadata: {
    parameters: {
      /**
       * @description A lekérés kiértékelésének időpontja epoch másodpercben (az aktív zavarok lekéréséhez szükséges).A szerver ideje az alapértelmezett értéke.
       * @example 1625666578
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query?: {
        time?: number;
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description A szerver metaadataival tér vissza. */
      200: {
        content: {
          "application/json": components["schemas"]["MetadataResponse"];
        };
      };
    };
  };
  getMultiRouteDetails: {
    parameters: {
      /**
       * @description A lekért járatok azonosítói.
       * @example BKK_3040,BKK_3060
       */
      /**
       * @description Az aktív zavarok lekéréséhez használt dátum. Alapértelmezett értéke az aktuális nap.
       * @example 20210707
       */
      /**
       * @description Ha igaz, akkor az útvonalhoz tartozó kapcsolódó útvonalak is szerepelnek a válaszban.
       * @example false
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query: {
        routeId: string[];
        date?: string;
        related?: boolean;
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description Az összes járatot visszaadja a megadott azonosítókhoz. */
      200: {
        content: {
          "application/json": components["schemas"]["MultiRouteDetailsMethodResponse"];
        };
      };
      /** @description A `date` paramétert nem sikerült beolvasni. */
      400: never;
      /** @description Ismeretlen járat azonosító. */
      404: never;
    };
  };
  plan: {
    parameters: {
      /**
       * @description Az API verziója.
       * @example 2
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      /**
       * @description A dátum, amikor a tervezés indul (`arriveBy` esetén érkezik).
       * @example "2021-07-09T00:00:00.000Z"
       */
      /**
       * @description Az idő, amikor a tervezés indul (`arriveBy` esetén érkezik).
       * @example 11:35
       */
      /**
       * @description Az indulási hely adatai `név::hely` formában. A `név` az adott hely tetszőleges neve, amely az útiterv kiindulási pontjának lesz a neve (`leg.from.name`). A `hely` lehet koordináta `lat,lon` formában, vagy a geocoder API által visszaadott `vertex` azonosítója.
       * @example BKK Központi Ügyfélszolgálat::47.4985022,19.0551266
       */
      /**
       * @description Az érkezési hely adatai `név::hely` formában. A `név` az adott hely tetszőleges neve, amely az útiterv érkezési pontjának lesz a neve (`leg.to.name`). A `hely` lehet koordináta `lat,lon` formában, vagy a geocoder API által visszaadott `vertex` azonosítója.
       * @example Mechwart liget::BKK:CSF00195
       */
      /**
       * @description A tervező milyen közlekedési módokat használjon. A kerékpár kölcsönzés a `BICYCLE,WALK` paraméterekkel kapcsolható be.
       * @example TRANSIT,WALK
       */
      /**
       * @description Az első járműre szállás előtt történjen-e jegyvásárlás.
       * @example true
       */
      /**
       * @description A válasz tartalmazza-e a járatok által érintett köztes megállókat is.
       * @example true
       */
      /**
       * @description Érkezési időre tervezzünk-e a megadott `date` és `time` paraméterrel.
       * @example true
       */
      /**
       * @description Az összes járat alacsonypadlós legyen-e.
       * @example false
       */
      /**
       * @description Kerékpáros háromszög módú tervezés esetén mennyire számít a biztonság. 0 és 1 közötti szám, és 1-et kell kiadnia a másik két faktor összegével.
       * @example 0.5
       */
      /**
       * @description Kerékpáros háromszög módú tervezés esetén mennyire számít az útvonal síksága. 0 és 1 közötti szám, és 1-et kell kiadnia a másik két faktor összegével.
       * @example 0
       */
      /**
       * @description Kerékpáros háromszög módú tervezés esetén mennyire számít a gyorsaság. 0 és 1 közötti szám, és 1-et kell kiadnia a másik két faktor összegével.
       * @example 0.5
       */
      /**
       * @description A kereső mire optimalizálja az útvonalakat.
       * @example BEST
       */
      /**
       * @description A séta sebességét meghatározó profil.
       * @example MID
       */
      /**
       * @description Legfeljebb hány útvonal szerepeljen a válaszban.
       * @example 5
       */
      query: {
        version?: components["schemas"]["ApiVersion"];
        appVersion?: string;
        includeReferences?: components["schemas"]["ReferencesSchema"][];
        date?: string;
        time?: string;
        fromPlace: string;
        toPlace: string;
        mode: components["schemas"]["TraverseMode"][];
        shouldBuyTickets?: boolean;
        showIntermediateStops?: boolean;
        arriveBy?: boolean;
        wheelchair?: boolean;
        triangleSafetyFactor?: number;
        triangleSlopeFactor?: number;
        triangleTimeFactor?: number;
        optimize?: "BEST" | "WALK" | "TRANSFERS";
        walkProfile?: components["schemas"]["WalkProfile"];
        numItineraries?: number;
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description A megadott paraméterekkel tervez útvonalat. */
      200: {
        content: {
          "application/json": components["schemas"]["PlanTripResponse"];
        };
      };
    };
  };
  planAccess: {
    parameters: {
      /**
       * @description Az API verziója.
       * @example 2
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      /**
       * @description A dátum, amikor a tervezés indul (`arriveBy` esetén érkezik).
       * @example "2021-07-09T00:00:00.000Z"
       */
      /**
       * @description Az idő, amikor a tervezés indul (`arriveBy` esetén érkezik).
       * @example 11:35
       */
      /**
       * @description Az indulási hely adatai `név::hely` formában. A `név` az adott hely tetszőleges neve, amely az útiterv kiindulási pontjának lesz a neve (`leg.from.name`). A `hely` lehet koordináta `lat,lon` formában, vagy a geocoder API által visszaadott `vertex` azonosítója.
       * @example BKK Központi Ügyfélszolgálat::47.4985022,19.0551266
       */
      /**
       * @description Az érkezési hely adatai `név::hely` formában. A `név` az adott hely tetszőleges neve, amely az útiterv érkezési pontjának lesz a neve (`leg.to.name`). A `hely` lehet koordináta `lat,lon` formában, vagy a geocoder API által visszaadott `vertex` azonosítója.
       * @example Mechwart liget::BKK:CSF00195
       */
      /**
       * @description A tervező milyen közlekedési módokat használjon. A kerékpár kölcsönzés a `BICYCLE,WALK` paraméterekkel kapcsolható be.
       * @example TRANSIT,WALK
       */
      /**
       * @description Az első járműre szállás előtt történjen-e jegyvásárlás.
       * @example true
       */
      /**
       * @description A válasz tartalmazza-e a járatok által érintett köztes megállókat is.
       * @example true
       */
      /**
       * @description Érkezési időre tervezzünk-e a megadott `date` és `time` paraméterrel.
       * @example true
       */
      /**
       * @description Az összes járat alacsonypadlós legyen-e.
       * @example false
       */
      /**
       * @description Kerékpáros háromszög módú tervezés esetén mennyire számít a biztonság. 0 és 1 közötti szám, és 1-et kell kiadnia a másik két faktor összegével.
       * @example 0.5
       */
      /**
       * @description Kerékpáros háromszög módú tervezés esetén mennyire számít az útvonal síksága. 0 és 1 közötti szám, és 1-et kell kiadnia a másik két faktor összegével.
       * @example 0
       */
      /**
       * @description Kerékpáros háromszög módú tervezés esetén mennyire számít a gyorsaság. 0 és 1 közötti szám, és 1-et kell kiadnia a másik két faktor összegével.
       * @example 0.5
       */
      /**
       * @description A kereső mire optimalizálja az útvonalakat.
       * @example BEST
       */
      /**
       * @description A séta sebességét meghatározó profil.
       * @example MID
       */
      /**
       * @description Legfeljebb hány útvonal szerepeljen a válaszban.
       * @example 5
       */
      query: {
        version?: components["schemas"]["ApiVersion"];
        appVersion?: string;
        includeReferences?: components["schemas"]["ReferencesSchema"][];
        date?: string;
        time?: string;
        fromPlace: string;
        toPlace: string;
        mode: components["schemas"]["TraverseMode"][];
        shouldBuyTickets?: boolean;
        showIntermediateStops?: boolean;
        arriveBy?: boolean;
        wheelchair?: boolean;
        triangleSafetyFactor?: number;
        triangleSlopeFactor?: number;
        triangleTimeFactor?: number;
        optimize?: "BEST" | "WALK" | "TRANSFERS";
        walkProfile?: components["schemas"]["WalkProfile"];
        numItineraries?: number;
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description A megadott paraméterekkel tervez útvonalat. */
      200: {
        content: {
          "application/json": components["schemas"]["PlanTripResponse"];
        };
      };
    };
  };
  getReferences: {
    parameters: {
      /**
       * @description A szolgáltató ID-je.
       * @example BKK
       */
      /**
       * @description A zavar ID-je.
       * @example BKK_bkkinfo-81404
       */
      /**
       * @description A járat ID-ja.
       * @example BKK_3040
       */
      /**
       * @description A megálló ID-ja.
       * @example BKK_F00001
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query?: {
        agencyId?: string[];
        alertId?: string[];
        routeId?: string[];
        stopId?: string[];
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description ID alapú referencia lekérdezés. */
      200: {
        content: {
          "application/json": components["schemas"]["ReferencesMethodResponse"];
        };
      };
    };
  };
  getRouteDetailsForStop: {
    parameters: {
      /**
       * @description A lekért megálló azonosítója.
       * @example BKK_F01294
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query?: {
        stopId?: string;
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description A megállóhoz és a testvérmegállóihoz tartozó összes járattal tér vissza. */
      200: {
        content: {
          "application/json": components["schemas"]["RouteDetailsForStopMethodResponse"];
        };
      };
      /** @description Ismeretlen megálló azonosító. */
      404: never;
    };
  };
  getRouteDetails: {
    parameters: {
      /**
       * @description A járat ID-ja.
       * @example BKK_3040
       */
      /**
       * @description Az aktív zavarok lekéréséhez használt dátum. Alapértelmezett értéke az aktuális nap.
       * @example 20210707
       */
      /**
       * @description Ha igaz, akkor az útvonalhoz tartozó kapcsolódó útvonalak is szerepelnek a válaszban.
       * @example false
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query: {
        routeId: string;
        date?: string;
        related?: boolean;
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description Visszaadja a megadott ID-val rendelkező járatot. */
      200: {
        content: {
          "application/json": components["schemas"]["RouteDetailsMethodResponse"];
        };
      };
      /** @description Rossz formátumú a `date` paraméter. */
      400: never;
      /** @description Az ID-hoz nem található járat. */
      404: never;
    };
  };
  getScheduleForStop: {
    parameters: {
      /**
       * @description A releváns megállók azonosítói.
       * @example BKK_F01294,BKK_F01294
       */
      /**
       * @description A kért dátum.
       * @example 20210708
       */
      /**
       * @description Igaz esetén az érkezési és előrejelzett érkezési idők ki lesznek hagyva a válaszból.
       * @example false
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query?: {
        stopId?: string[];
        date?: string;
        onlyDepartures?: boolean;
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description Visszaadja a menetrendet az adott megállóhoz. */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleForStopOTPMethodResponse"];
        };
      };
      /** @description Nem sikerült beolvasni a dátumot. */
      400: never;
      /** @description Ismeretlen stopId. */
      404: never;
    };
  };
  search: {
    parameters: {
      /**
       * @description Szűrőfeltétel, amire illesztve vannak a zavarok, járatok és megállók.
       * @example BKK_bkkinfo-75694
       */
      /**
       * @description A látható térkép középpontjának szélessgéi koordinátája.
       * @example 47.4973131430789
       */
      /**
       * @description A látható térkép középpontjának hosszúsági koordinátája.
       * @example 19.064639534671457
       */
      /**
       * @description A visszaadott elemek minimális száma.
       * @example 5
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */

      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query?: {
        query?: string;
        lat?: number;
        lon?: number;
        minResult?: number;
        /**
         * @description Az API verziója.
         * @example 2
         */
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description Visszaadja az olyan zavarokat, megállókat és járatokat, amelyek tulajdonságai illeszkednek a megadott szűrőrfeltételre. */
      200: {
        content: {
          "application/json": components["schemas"]["SearchMethodResponse"];
        };
      };
    };
  };
  getStatistics: {
    parameters: {
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description Egyszerű végpont hibakereséshez, ami egy "OK" választ ad vissza. */
      200: {
        content: {
          "application/json": components["schemas"]["StatisticsResponse"];
        };
      };
    };
  };
  getStopsForLocation: {
    parameters: {
      /**
       * @description A helyszín középpontjának szélessgéi koordinátája.
       * @example 47.4973131430789
       */
      /**
       * @description A helyszín középpontjának hosszúsági koordinátája.
       * @example 19.064639534671457
       */
      /**
       * @description A lekérési terület szélességi íve. (Terület szélessége: `lat +/- latspan`).
       * @example 0.013365429598373169
       */
      /**
       * @description A lekérési terület hosszúsági íve. (Terület hosszúsága: `lon +/- lonSpan`).
       * @example 0.032126676908724505
       */
      /**
       * @description Ha a `latSpan` vagy a `longSpan` nincs kitöltve, a keresési terület a középpontól számított `radius` méter távolság mind a négy irányban.
       * @example 100
       */
      /** @description A válasz szűrésére használt keresési kifejezés. */
      /**
       * @description A visszaadott elemek minimális száma.
       * @example 5
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query?: {
        lat?: number;
        lon?: number;
        latSpan?: number;
        lonSpan?: number;
        radius?: number;
        query?: string;
        minResult?: number;
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description Egy megállólistát ad vissza az adott helyhez. Ha a lat vagy a lon null, akkor az összes megálló bekerül a válaszba. */
      200: {
        content: {
          "application/json": components["schemas"]["StopsForLocationResponse"];
        };
      };
    };
  };
  getTicketingData: {
    parameters: {
      /**
       * @description Ha meg van adva, akkor csak abban az esetben érkezik vissza adat, ha az változott a másodpercekben megadott időpont óta. Különben HTTP 304 a válasz.
       * @example 1625685137
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query?: {
        ifModifiedSince?: number;
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description Visszaadja az összes jegyértékesítő helyet és jegytípust. */
      200: {
        content: {
          "application/json": components["schemas"]["TicketingMethodResponse"];
        };
      };
      /** @description Nem változott az adat az `ifModifiedSince` paraméterben megadott időpont óta. */
      304: never;
    };
  };
  getTripDetails: {
    parameters: {
      /**
       * @description Amennyiben meg van adva, azon menet érkezik a válaszban, amit az adott jármű teljesít.
       * @example BKK_4510
       */
      /**
       * @description Ha nincs kitöltve a járműazonosító, az itt megadott azonosítóval rendelkező menet lesz a válaszban.
       * @example BKK_C23556161
       */
      /**
       * @description Ha nincs kitöltve a járműazonosító, ezen a dátumon lesz keresve az adott azonosítójú menet.
       * @example 20210708
       */
      /**
       * @description Akkor adunk vissza adatot, ha az módosult az itt megadott időbélyeg (UNIX időbélyeg másodpercben) után. Ellenkező esetben HTTP 304 a válasz, ha nincs változás.
       * @example 1625685137
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query?: {
        vehicleId?: string;
        tripId?: string;
        date?: string;
        ifModifiedSince?: number;
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description Visszaadja a részletes információit egy menetnek, ami az azonosítója és a dátum alapján, vagy az azt teljesítő jármű azonosítója alapján lett lekérve. */
      200: {
        content: {
          "application/json": components["schemas"]["TripDetailsOTPMethodResponse"];
        };
      };
      /** @description Nem változott az adat az `ifModifiedSince` paraméterben megadott időpont óta. */
      304: never;
      /** @description Nem sikerült beolvasni a dátumot. */
      400: never;
      /** @description A következő esetek egyike: -Ismeretlen járműazonosító. -Ismereten menetazonosító. -A kért menet nem közlekedik az adott napon. */
      404: never;
    };
  };
  getVehicleForTrip: {
    parameters: {
      /**
       * @description A lekért menetek azonosítói.
       * @example BKK_C3135012112,BKK_C3135012044
       */
      /**
       * @description A lekért menetrendi napok. Alapértelmezetten az aktuális nap.
       * @example BKK_F01081
       */
      /**
       * @description Akkor adunk vissza adatot, ha az módosult az itt megadott időbélyeg (UNIX időbélyeg másodpercben) után. Ellenkező esetben HTTP 304 a válasz, ha nincs változás.
       * @example 1625685137
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query: {
        tripId: string[];
        date?: string[];
        ifModifiedSince?: number;
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description Visszatér a megadott menetekhez és menetrendi napokhoz tartozó járművekkel. */
      200: {
        content: {
          "application/json": components["schemas"]["VehicleForTripMethodResponse"];
        };
      };
      /** @description Nem változott az adat az `ifModifiedSince` paraméterben megadott időpont óta. */
      304: never;
      /** @description A menet azonosítókat és menetrendi napokat tartalmazó tömbök mérete nem egyezik. */
      400: never;
      /** @description Az egyik menet azonosítóhoz nem található menet. */
      404: never;
    };
  };
  getVehiclesForLocation: {
    parameters: {
      /**
       * @description A válasz listát szűrő feltétel, amit tartalmaznia kell a jármű azonosítójának, rendszámának vagy a típusának.
       * @example BKK_4510
       */
      /**
       * @description A terület középpontjának szélességi koordinátája.
       * @example 47.4973131430789
       */
      /**
       * @description A terület középpontjának hosszúsági koordinátája.
       * @example 19.064639534671457
       */
      /**
       * @description A lekérési terület szélességi íve. (Terület szélessége: `lat +/- latspan`).
       * @example 0.013365429598373169
       */
      /**
       * @description A lekérési terület hosszúsági íve. (Terület hosszúsága: `lon +/- lonSpan`).
       * @example 0.032126676908724505
       */
      /**
       * @description Ha a `latSpan` vagy a `longSpan` nincs kitöltve, a keresési terület a középpontól számított `radius` méter távolság mind a négy irányban.
       * @example 100
       */
      /**
       * @description Akkor adunk vissza adatot, ha az módosult az itt megadott időbélyeg (UNIX időbélyeg másodpercben) után. Ellenkező esetben HTTP 304 a válasz, ha nincs változás.
       * @example 1625685137
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query?: {
        query?: string;
        lat?: number;
        lon?: number;
        latSpan?: number;
        lonSpan?: number;
        radius?: number;
        ifModifiedSince?: number;
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description Visszatér az adott területen található összes járművel. Ha a `lat` vagy a `lon` null, az összes jármű benne lesz a válaszban. */
      200: {
        content: {
          "application/json": components["schemas"]["VehiclesForLocationMethodResponse"];
        };
      };
      /** @description Nem változott az adat az `ifModifiedSince` paraméterben megadott időpont óta. */
      304: never;
    };
  };
  getVehiclesForRoute: {
    parameters: {
      /**
       * @description A lekért járatok azonosítói.
       * @example BKK_3040,BKK_3060
       */
      /**
       * @description Tartalmazza-e a válasz a kapcsolódó járatokat is a referenciákban.
       * @example false
       */
      /**
       * @description Akkor adunk vissza adatot, ha az módosult az itt megadott időbélyeg (UNIX időbélyeg másodpercben) után. Ellenkező esetben HTTP 304 a válasz, ha nincs változás.
       * @example 1625685137
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query: {
        routeId: string[];
        related?: boolean;
        ifModifiedSince?: number;
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description A megadott járat azonosítókhoz tartozó járművekkel tér vissza. */
      200: {
        content: {
          "application/json": components["schemas"]["VehiclesForRouteMethodResponse"];
        };
      };
      /** @description Nem változott az adat az `ifModifiedSince` paraméterben megadott időpont óta. */
      304: never;
      /** @description A járat azonosítóhoz nem található járat. */
      404: never;
    };
  };
  getVehiclesForStop: {
    parameters: {
      /**
       * @description A lekért megálló azonosítója.
       * @example BKK_F01081
       */
      /**
       * @description Akkor adunk vissza adatot, ha az módosult az itt megadott időbélyeg (UNIX időbélyeg másodpercben) után. Ellenkező esetben HTTP 304 a válasz, ha nincs változás.
       * @example 1625685137
       */
      /**
       * @description A kliensalkalmazás verziója.
       * @example 1.1.abc
       */
      /**
       * @description Az API verziója.
       * @example 2
       */
      /** @description A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül. */
      query: {
        stopId: string;
        ifModifiedSince?: number;
        appVersion?: string;
        version?: components["schemas"]["ApiVersion"];
        includeReferences?: components["schemas"]["ReferencesSchema"][];
      };
      /**
       * @description Az API referenciáinak dialektusa.
       * @example otp
       */
      path: {
        dialect: components["schemas"]["Dialect"];
      };
    };
    responses: {
      /** @description Visszaadja az összes járművet, ami olyan menetet teljesít, ami tartalmazza a megadott megállót. */
      200: {
        content: {
          "application/json": components["schemas"]["VehiclesForStopMethodResponse"];
        };
      };
      /** @description Nem változott az adat az `ifModifiedSince` paraméterben megadott időpont óta. */
      304: never;
      /** @description A megálló azonosítóhoz nem található megálló. */
      404: never;
    };
  };
}
